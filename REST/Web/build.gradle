apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'eclipse'

group = "forxy"

sourceSets {
    main {
        java { srcDir 'src/main' }
        resources { srcDir 'src/main' }
    }
    test {
        java { srcDir 'src/test' }
        resources { srcDir 'src/test' }
    }
}

jar { from sourceSets.main.allJava }

if (System.env.OUTPUT_ROOT) {
    buildDir = file("$System.env.OUTPUT_ROOT/$project.name")
}

repositories {
    mavenCentral()
    ivy {
        url "file://$System.env.OUTPUT_ROOT/deliverables/"
        layout "pattern", {
            artifact "[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
            m2compatible = true
        }
    }

    uploadArchives {
        repositories {
            ivy {
                url "file://$System.env.OUTPUT_ROOT/deliverables/"
            }
        }
    }
}

// ========= Environment ================================================

import org.apache.tools.ant.filters.ReplaceTokens

if (project.hasProperty('env')) {
    def env = project.getProperty("env")

    task copyEnvConfigApp(type: Copy) {
        from 'appconfig'
        into "$System.env.TOMCAT_HOME/conf/appconfig"
        include '**/*.properties'
        include '**/*.jks'
        exclude '**/*.bat'
        exclude '**/*.sh'
    }

    task copyEnvConfigTomcat(type: Copy) {
        from "appconfig/env/$env"
        into "$System.env.TOMCAT_HOME/bin"
        include '**/*.bat'
        include '**/*.sh'
    }

    task copyWebContextConfig(type: Copy) {
        from "appconfig/Web.xml"
        into "$System.env.TOMCAT_HOME/conf/Web/forxy"
        filter(ReplaceTokens, tokens: [war: war.archiveName])
    }

    task setupEnv {
        dependsOn copyEnvConfigApp, copyEnvConfigTomcat, copyWebContextConfig
    }
}

// ========== Deploy ====================================================

war {
    manifest {
        attributes(
                'Product': rootProject.name,
                'Version': version,
                'Built-On': new Date().format('yyyy-mm-dd HH:MM:ss')
        )
    }
}

task deploy(type: Copy) {
    dependsOn war
    if (project.hasProperty('env')) {
        dependsOn setupEnv
    }
    from war
    into "$System.env.TOMCAT_HOME/warfiles"
}

// ========== Clean Deployment Configuration ============================

task cleanTomcat(type: Delete) {
    FileTree tree = fileTree("$System.env.TOMCAT_HOME") {
        include "conf/Web/forxy/Web.xml",
                "warfiles/ru.forxy.web*.war",
                "conf/appconfig/**/ru.forxy.web*.properties",
                "conf/appconfig/**/cryptoClient*.jks",
                "conf/appconfig/**/web*.jks"
    }
    delete tree
}

// ========== Tests =====================================================

test {
    reports.html.enabled = true
    maxParallelForks = 8
}

// ========== Dependencies ==============================================

dependencies {
    // --------------------- FORXY ---------------------------------------
    compile "forxy:ru.forxy.crypto.api:${rev_forxy_crypto}"
    compile "forxy:ru.forxy.user.api:${rev_forxy_user}"
    compile "forxy:ru.forxy.photo.api:${rev_forxy_photo}"
    compile "forxy:ru.forxy.common.support:${rev_forxy_common}"

    // --------------------- COMMON --------------------------------------
    compile "commons-collections:commons-collections:${rev_common_collections}"
    compile "ch.qos.logback:logback-core:${rev_logback}"
    compile "ch.qos.logback:logback-classic:${rev_logback}"
    compile "org.slf4j:slf4j-api:${rev_slf4j}"

    // --------------------- CXF -----------------------------------------
    compile "org.apache.cxf:cxf-bundle-jaxrs:${rev_cxf}"

    // --------------------- SPRING --------------------------------------
    compile "org.springframework:spring-core:${rev_spring}"
    compile "org.springframework:spring-beans:${rev_spring}"
    compile "org.springframework:spring-context:${rev_spring}"
    compile "org.springframework:spring-web:${rev_spring}"
    compile "org.springframework:spring-test:${rev_spring}"
    compile "org.springframework:spring-webmvc:${rev_spring}"

    // ===================== TEST ========================================
    compile "junit:junit:${rev_junit}"
}